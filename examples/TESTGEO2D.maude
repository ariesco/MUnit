load mUnit.maude

(munit GEO2D is
	assertEqual(p(1.0 0.0) , p(1.0 0.0))
	assertTrue(vertical(r(p(1.0 0.0) p(2.0 0.0))))
	assertTrue(vertical(r(p(3.0 0.0) p(3.0 -5.0))))
	assertEqual(ecu-recta-m(r(p(1.0 1.0) p(0.0 0.0))) , ecu-recta-m(r(p(0.0 0.0) p(-1.0 -1.0))))
	assertEqual(ecu-recta-n(r(p(1.0 1.0) p(0.0 0.0))) , ecu-recta-n(r(p(0.0 0.0) p(-1.0 -1.0))))
	assertEqual(ecu-recta-m(r(p(3.0 1.0) p(0.0 0.0))) , ecu-recta-m(r(p(0.0 0.0) p(-3.0 1.0))))
	assertTrue(son-iguales(r(p(2.0 3.0) p(0.0 0.0)) , r(p(0.0 0.0) p(2.0 3.0))))
	assertTrue(son-iguales(r(p(2.0 3.0) p(0.0 0.0)) , r(p(6.0 -2.0) p(-9.0 2.0))))
	assertTrue(se-cortan(r(p(1.0 0.0) p(0.0 1.0)) , r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(se-cortan(r(p(1.0 0.0) p(0.0 0.0)) , r(p(2.0 0.0) p(1.0 0.0))))
	assertEqual(pto-corte(r(p(1.0 0.0) p(0.0 1.0)) , r(p(1.0 1.0) p(0.0 0.0))) , p(0.5 0.5))
	assertEqual(pto-corte(r(p(1.0 0.0) p(2.0 0.0)) , r(p(0.0 4.0) p(0.0 -9.0))) , p(0.0 0.0))
	assertEqual(distancia(p(1.0 0.0) , p(0.0 1.0)) , sqrt(2.0))
	assertTrue(esta-en-recta(p(0.0 0.0) , r(p(1.0 1.0) p(-1.0 -1.0))))
	assertTrue(esta-en-recta(p(0.0 0.0) , r(p(1.0 0.0) p(0.0 1.0))))
	assertEqual(convierte-en-recta(1.0 , 0.0) , r(p(0.0 0.0) p(1.0 1.0)))
	assertEqual(convierte-en-recta(1.0, 0.0) , r(p(0.0 0.0) p(-1.0 -1.0)))
	assertTrue(son-iguales(convierte-en-recta(1.0 , 0.0) , r(p(0.0 0.0) p(-1.0 -1.0))))
	assertTrue(son-iguales(recta-mediante-vector(vector-director-recta(r(p(0.0 1.0) p(1.0 0.0))) , p(0.5 0.5)) , r(p(1.0 0.0) p(0.0 1.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(1.0 0.0) p(0.0 1.0)) , p(0.5 0.5)) , r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(esta-en-circunferencia(p(1.0 0.0) , c(p(0.0 0.0) , 1.0)))
	assertTrue(esta-en-circunferencia(p(0.5 0.34) , c(p(0.0 0.0) , 1.0)))
	assertTrue(esta-en-circunferencia(p(2.0 -6.0) , c(p(0.0 0.0) , 1.0)))
	assertTrue(se-cortan-c-c(c(p(0.0 0.0) , 1.0) , c(p(1.0 1.0) , 1.0)))
	assertTrue(se-cortan-c-c(c(p(0.0 0.0) , 1.0) , c(p(0.0 0.0) , 1.0)))
	assertTrue(se-cortan-c-c(c(p(0.0 0.0) , 2.0) , c(p(0.0 0.0) , 1.0)))
	assertTrue(se-cortan-r-c(r(p(1.0 0.0) p(0.0 1.0)) , c(p(0.3 0.3) , 0.5)))
	assertTrue(se-cortan-r-c(r(p(1.0 0.0) p(0.0 1.0)) , c(p(0.3 0.3) , 0.1)))
	assertEqual(ecu-segundo-grado-1(1.0 , 0.0 , -1.0) , 1.0)
	assertEqual(ecu-segundo-grado-2(1.0 , 0.0 , -1.0) , -1.0)
	assertEqual(ecu-segundo-grado-1(1.0 , 1.0 , 1.0) , (sqrt(-3.0) - 1.0) / 2.0)
	assertEqual(ecu-segundo-grado-1(1.0 , 1.0 , 1.0) , (-1.0 + sqrt(-3.0)) / 2.0)
	assertEqual(ecu-segundo-grado-1(1.0 , 2.0 , -3.0) , 1.0)
	assertEqual(ecu-segundo-grado-2(1.0 , 2.0 , -3.0) , -3.0)
	assertEqual(pto-corte-circunferencias(c(p(0.0 0.0) , 1.0) , c(p(1.0 1.0) , 1.0)) , mt p(0.0 1.0) p(1.0 0.0))
	assertEqual(pto-corte-circunferencias(c(p(0.0 0.0) , 0.5) , c(p(1.0 1.0) , 0.5)) , mt p(0.5 0.5) p(0.5 0.5))
	assertEqual(pto-corte-circunferencias(c(p(0.0 0.0) , 1.0) , c(p(0.0 0.0) , 2.0)) , mt)
	assertEqual(pto-corte-circunferencias(c(p(0.0 0.0) , 1.0) , c(p(0.0 0.0) , 1.0)) , mt)
	assertTrue(r-perpendiculares(r(p(1.0 0.0) p(0.0 1.0)) , r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(r-perpendiculares(r(p(1.0 0.0) p(0.0 1.0)) , recta-perpendicular(r(p(1.0 0.0) p(0.0 1.0)) , p(0.5 6.5))))

endu)
