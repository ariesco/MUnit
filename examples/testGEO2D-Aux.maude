load GEO2D-Aux.maude
load ../mUnit.maude
***(
(munit LISTA-FIGURAS is
		***Constructores de la lista
	assertEqual(mtf & mtf, mtf)	
	assertEqual(mtf & c(p(2.0 3.0), 1.0), c(p(2.0 3.0), 1.0))
	assertEqual(p(0.0 0.0) & c(p(2.0 3.0), 1.0), c(p(2.0 3.0), 1.0) & p(0.0 0.0))
endu)
)
(munit DICC-FIGURAS is
		***Veamos las funciones referidas a los diccionarios simples para figuras
		***Veamos el operador _[_]
	assertEqual(qid(string('p1)) -> p(0.0 0.0) [qid(string('p1))], p(0.0 0.0))
		***Veamos el operador _[_/_]
	assertEqual(qid(string('p1)) -> p(0.0 0.0) [qid(string('p1)) / p(1.0 1.0)], qid(string('p1)) -> p(1.0 1.0))
	assertEqual(qid(string('p1)) -> p(0.0 0.0) [qid(string('p2)) / p(1.0 1.0)], (qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)))
		***Veamos la funcion _in_
	assertTrue(p(0.0 0.0) in (qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)))
	assertTrue(p(0.0 0.0) in (qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)))
	assertTrue(p(0.0 1.0) in (qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)))
		***Veamos la funcion contains?
	assertTrue(contains?((qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)), qid(string('p1)) ))
	assertTrue(contains?((qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)), qid(string('p2)) ))
	assertTrue(contains?((qid(string('p1)) -> p(0.0 0.0)) . (qid(string('p2))-> p(1.0 1.0)), qid(string('r1)) ))
		***Veamos la funcion nombre
	assertEqual(nombre(qid(string('p)) -> p(0.0 0.0), p(0.0 0.0)), qid(string('p)))
	assertEqual(nombre(qid(string('p)) -> p(0.0 0.0), p(0.0 0.0)), qid(string('r)))
		***Veamos las funciones referidas a los diccionarios para figuras
		***Veamos el operador _[_]
	assertEqual([(qid(string('p1)) -> p(0.0 0.0)), mtD, mtD ] [qid(string('p1))], p(0.0 0.0))
		***Veamos el opertador _[_/_]
	assertEqual([mtD, mtD, mtD] [qid(string('p1)) / p(1.0 1.0)], [(qid(string('p1)) -> p(1.0 1.0)), mtD, mtD])
	assertEqual([mtD, mtD, mtD] [qid(string('r1)) / r(p(1.0 1.0) p(0.0 0.0))], [mtD, (qid(string('r1)) -> r(p(1.0 1.0)) p(0.0 0.0)), mtD])
	assertEqual([mtD, mtD, mtD] [qid(string('c1)) / c(p(1.0 1.0), 1.0)], [mtD, mtD, (qid(string('c1)) -> c(p(1.0 1.0), 1.0))])
		***Veamos el operador _U_
	assertEqual([mtD, mtD, mtD] U [(qid(string('p1)) -> p(1.0 1.0)), mtD, mtD] , [(qid(string('p1)) -> p(1.0 1.0)), mtD, mtD])
	assertEqual([(qid(string('p1)) -> p(1.0 1.0)), mtD, mtD] U [mtD, (qid(string('r1)) -> r(p(1.0 1.0)) p(0.0 0.0)), mtD] , [(qid(string('p1)) -> p(1.0 1.0)), (qid(string('r1)) -> r(p(1.0 1.0)) p(0.0 0.0)), mtD])
	assertEqual([(qid(string('p1)) -> p(1.0 1.0)), (qid(string('r1)) -> r(p(1.0 1.0)) p(0.0 0.0)), mtD] U [mtD, mtD, (qid(string('c1)) -> c(p(1.0 1.0), 1.0))] , [(qid(string('p1)) -> p(1.0 1.0)), (qid(string('r1)) -> r(p(1.0 1.0)) p(0.0 0.0)), (qid(string('c1)) -> c(p(1.0 1.0), 1.0))])
	assertEqual([mtD, mtD, mtD] U [mtD, mtD, (qid(string('c1)) -> c(p(0.0 0.0), 1.0))] , [mtD, mtD, (qid(string('c1)) -> c(p(0.0 0.0), 1.0))] )
		***Veamos la funcion in
	assertTrue(p(0.0 0.0) in [(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))])
	assertTrue(r(p(1.0 1.0) p(0.0 0.0)) in [(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))])
	assertTrue(c(p(1.0 1.0), 1.0) in [(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))])
	assertTrue(p(0.0 0.0) in [mtD, mtD, mtD])
		***Veamos la funcino constains?
	assertTrue(contains?([(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))], qid(string('p))))
	assertTrue(contains?([(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))], qid(string('r))))
	assertTrue(contains?([(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))], qid(string('c))))
	assertTrue(contains?([(qid(string('p)) -> p(0.0 0.0)), (qid(string('r)) -> r(p(1.0 1.0) p(0.0 0.0))), (qid(string('c)) -> c(p(1.0 1.0), 1.0))], qid(string('s))))
		***Veamos la funcion nombre
	assertEqual(nombre([(qid(string('p)) -> p(0.0 0.0)), mtD, mtD], p(0.0 0.0)), qid(string('p)))
	assertEqual(nombre([mtD, mtD, mtD], p(0.0 0.0)), nil)
	assertEqual(nombre([(qid(string('p)) -> p(0.0 0.0)), mtD, mtD], (p(1.0 1.0) & p(0.0 0.0))), qid(string('p)))
endu)

