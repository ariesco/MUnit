load GEO2D.maude
load ../mUnit.maude

(munit RECTA is
		***Comenzaremos viendo como se comportan las funciones referidas a los vectores.
		***Funci√≥n v-prod-escalar.
	assertEqual(v-prod-escalar(v(1.0 0.0), v(0.0 1.0)), 0.0)
	assertEqual(v-prod-escalar(v(1.0 0.0), v(0.0 1.0)), 1.0)
	assertEqual(v-prod-escalar(v(1.0 2.0), v(2.0 1.0)), 4.0)
	assertEqual(v-prod-escalar(v(1.0 2.0), v(-2.0 1.0)), 0.0)		
		***Funcion v-modulo.
	assertEqual(v-modulo(v(2.0 0.0)), sqrt(8.0))
	assertEqual(v-modulo(v(2.0 0.0)), 4.0)
	assertEqual(v-modulo(v(2.0 0.0)), 2.0)
	assertEqual(v-modulo(v(2.0 3.0)), sqrt(13.0))
	assertEqual(v-modulo(v(-2.0 3.0)), sqrt(13.0))
		***Funcion vector-perpendicular.
	assertEqual(vector-perpendicular(v(1.0 0.0)), v(0.0 1.0))
	assertEqual(vector-perpendicular(v(1.0 2.0)), v(2.0 1.0))
	assertEqual(vector-perpendicular(v(1.0 2.0)), v(-2.0 1.0))
	assertEqual(vector-perpendicular(v(1.0 0.0)), v(0.0 -1.0))
	assertEqual(vector-perpendicular(v(1.0 0.0)), v(0.0 2.0))
		***Funcion v-perpendiculares.
	assertTrue(v-perpendiculares(v(1.0 0.0), v(0.0 1.0)))
	assertTrue(v-perpendiculares(v(1.0 0.0), v(0.0 -1.0)))
	assertTrue(v-perpendiculares(v(1.0 2.0), v(2.0 1.0)))
	assertTrue(v-perpendiculares(v(1.0 2.0), v(-2.0 1.0)))
	assertTrue(v-perpendiculares(v(1.0 0.0), v(1.0 0.0)))
	assertTrue(v-perpendiculares(v(32.0 43.0), v(67.0 23.0)))
	assertTrue(v-perpendiculares(v(2.0 3.0), vector-perpendicular(v(2.0 3.0))))
	assertTrue(v-perpendiculares(v(-72.0 96.0), vector-perpendicular(v(-72.0 96.0))))
		***Funciones referidas a las rectas.
		***Funciones ecu-recta-m y ecu-recta-n.
	assertEqual(ecu-recta-m(r(p(0.0 0.0) p(1.0 1.0))), 1.0)
	assertEqual(ecu-recta-m(r(p(0.0 1.0) p(1.0 0.0))), -1.0)
	assertEqual(ecu-recta-m(r(p(0.0 0.0) p(0.0 45.0))), 1.0)
	assertEqual(ecu-recta-m(r(p(12.0 3.0) p(12.0 4.0))), 1.0)
	assertEqual(ecu-recta-n(r(p(0.0 0.0) p(1.0 1.0))), 0.0)
	assertEqual(ecu-recta-n(r(p(1.0 1.0) p(2.0 0.0))), 1.0)
	assertEqual(ecu-recta-n(r(p(0.0 0.0) p(45.0 0.0))), 45.0)
	assertEqual(ecu-recta-n(r(p(12.0 3.0) p(12.0 4.0))), 12.0)
		***Funcion son-iguales.
	assertTrue(son-iguales(r(p(0.0 0.0) p(1.0 1.0)), r(p(-1.0 -1.0) p(23.0 23.0))))
	assertTrue(son-iguales(r(p(0.0 0.0) p(1.0 1.0)) , r(p(23.0 23.0) p(-1.0 -1.0))))
	assertTrue(son-iguales(r(p(0.0 0.0) p(1.0 0.0)) , r(p(0.0 0.0) p(0.0 1.0))))
	assertTrue(son-iguales(r(p(0.0 0.0) p(1.0 2.0)) , r(p(0.0 0.0) p(-1.0 -2.0))))
	assertTrue(son-iguales(r(p(0.0 0.0) p(1.0 2.0)) , r(p(0.0 0.0) p(-2.0 -1.0))))
	assertTrue(son-iguales(r(p(1.0 1.0) p(0.0 0.0)), r(p(-1.0 -1.0) p(0.0 0.0))))
		***Funcion recta-mediante-vector.
	assertEqual(recta-mediante-vector(v(1.0 2.0), p(0.0 0.0)),r(p(0.0 0.0) p(1.0 2.0)))
	assertEqual(recta-mediante-vector(v(1.0 2.0), p(0.0 0.0)),r(p(1.0 2.0) p(0.0 0.0)))
	assertTrue(son-iguales(recta-mediante-vector(v(1.0 2.0), p(0.0 0.0)), r(p(0.0 0.0) p(1.0 2.0))))
	assertTrue(son-iguales(recta-mediante-vector(v(1.0 2.0), p(0.0 0.0)), r(p(1.0 2.0) p(0.0 0.0))))
	assertTrue(son-iguales(recta-mediante-vector(v(2.0 3.0), p(1.0 1.0)), r(p(-1.0 -2.0) p(1.0 1.0))))
	assertEqual(recta-mediante-vector(v(2.0 3.0), p(1.0 1.0)) , r(p(-1.0 -2.0) p(1.0 1.0)))
	assertTrue(son-iguales(recta-mediante-vector(v(1.0 1.0), p(0.0 0.0)), r(p(1.0 1.0) p(0.0 0.0))))
	assertTrue(son-iguales(recta-mediante-vector(v(-1.0 -1.0), p(0.0 0.0)), r(p(1.0 1.0) p(0.0 0.0))))
		***Funcion recta-perpendicular.
	assertTrue(son-iguales(recta-perpendicular(r(p(0.0 0.0) p(0.0 1.0)), p(0.0 0.0)), r(p(0.0 0.0) p(1.0 0.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(0.0 0.0) p(0.0 1.0)), p(1.0 1.0)), r(p(1.0 1.0) p(2.0 1.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(0.0 0.0) p(1.0 0.0)), p(0.0 0.0)), r(p(0.0 0.0) p(0.0 1.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(0.0 0.0) p(1.0 0.0)), p(1.0 1.0)), r(p(1.0 1.0) p(1.0 2.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(3.0 -6.0) p(9.0 74.0)), p(0.0 0.0)), r(p(0.0 0.0) p(1.0 -4.0))))
	assertTrue(son-iguales(recta-perpendicular(r(p(1.0 0.0) p(0.0 1.0)), p(0.5 0.5)), r(p(0.5 0.5) p(1.0 1.0))))
		***Funcion r-perpendiculares.
	assertTrue(r-perpendiculares(r(p(0.0 0.0) p(0.0 1.0)), r(p(0.0 0.0) p(1.0 0.0))))
	assertTrue(r-perpendiculares(r(p(0.0 0.0) p(0.0 1.0)), r(p(1.0 1.0) p(2.0 1.0))))
	assertTrue(r-perpendiculares(r(p(0.0 0.0) p(1.0 0.0)), r(p(0.0 0.0) p(0.0 1.0))))
	assertTrue(r-perpendiculares(r(p(0.0 0.0) p(1.0 0.0)), r(p(1.0 1.0) p(1.0 2.0))))
	assertTrue(r-perpendiculares(r(p(3.0 -6.0) p(9.0 74.0)), r(p(0.0 0.0) p(1.0 -4.0))))
	assertTrue(r-perpendiculares(r(p(1.0 0.0) p(0.0 1.0)), r(p(0.5 0.5) p(1.0 1.0))))
		***Funciones vertical y horizontal.
	assertTrue(vertical(r(p(13.0 -43.0) p(13.0 56.0))))
	assertTrue(vertical(r(p(13.0 -43.0) p(-13.0 56.0))))
	assertTrue(horizontal(r(p(57.0 12.0) p(24.0 12.0))))
	assertTrue(horizontal(r(p(57.0 12.0) p(24.0 -12.0))))
		***Funcion esta-en-recta.
	assertTrue(esta-en-recta(p(0.0 0.0), r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(esta-en-recta(p(1.0 1.0), r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(esta-en-recta(p(0.5 0.5), r(p(0.0 0.0) p(1.0 1.0))))
	assertTrue(esta-en-recta(p(2.0 3.0), r(p(1.0 2.0) p(3.0 4.0))))	
	assertTrue(esta-en-recta(p(0.0 0.0), r(p(1.0 0.0) p(0.0 1.0))))
	assertTrue(esta-en-recta(p(2.0 3.0), r(p(2.0 1.0) p(4.0 3.0))))
		***Funcion se-cortan-r-r
	assertTrue(se-cortan-r-r(r(p(2.0 3.0) p(3.0 4.0)), r(p(5.0 3.0) p(6.0 4.0))))
	assertTrue(se-cortan-r-r(r(p(2.0 3.0) p(3.0 4.0)), r(p(5.0 3.0) p(3.0 4.0))))
	assertTrue(se-cortan-r-r(r(p(0.0 0.0) p(1.0 0.0)), r(p(0.0 1.0) p(1.0 1.0))))
	assertTrue(se-cortan-r-r(r(p(0.0 0.0) p(1.0 0.0)), r(p(1.0 1.0) p(0.0 1.0))))
		***Funcion pto-corte-x
	assertEqual(pto-corte-x(r(p(0.0 0.0) p(1.0 1.0)), r(p(1.0 0.0) p(0.0 1.0))), 0.5)
	assertEqual(pto-corte-x(r(p(0.0 0.0) p(1.0 0.0)), r(p(23.0 -65.0) p(1.0 0.0))), 1.0)
	assertEqual(pto-corte-x(r(p(0.0 1.0) p(12.12 64.03)), r(p(43.31 -38.12) p(0.0 1.0))), 0.0)
		***Funcion pto-corte-y
	assertEqual(pto-corte-y(r(p(0.0 0.0) p(1.0 1.0)), r(p(1.0 0.0) p(0.0 1.0))), 0.5)
	assertEqual(pto-corte-y(r(p(0.0 0.0) p(1.0 0.0)), r(p(23.0 -65.0) p(1.0 0.0))), 1.0)
	assertEqual(pto-corte-y(r(p(0.0 1.0) p(12.12 64.03)), r(p(43.31 -38.12) p(0.0 1.0))), 0.0)
		***Funcion pto-corte-r-r
	assertEqual(pto-corte-r-r(r(p(23.0 5.4) p(-67.0 2.3)), r(p(-67.0 2.3) p(234.2 64.4))), p(-67.0 2.3))
	assertEqual(pto-corte-r-r(r(p(27.9 34.5) p(9.8 -3.8)), r(p(9.8 -3.8) p(4.0 6.3))), p(9.8 -3.8))
	assertEqual(pto-corte-r-r(r(p(1.3 46.4) p(112.0 0.86)), r(p(112.0 0.86) p(7.6 0.0))), p(112.0 0.86))
endu)
