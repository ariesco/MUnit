load CIRCUMFERENCE.maude
load ../mUnit.maude

(munit CIRCUMFERENCE is 
		***Funciones referidas a las circunferencias.
		***Funcion circumference-center.
	assertEqual(circumference-center(c(p(1.0 2.0), 3.0)), p(1.0 2.0))
	assertDifferent(circumference-center(c(p(1.0 2.0), 3.0)), p(2.0 1.0))
		***Funcion circumference-radius.
	assertEqual(circumference-radius(c(p(0.0 0.0), 3.4)), 3.4)
	assertDifferent(circumference-radius(c(p(0.0 0.0), 3.4)), 1.0)
		***Funcion are-in-circumference.
	assert***(are-in-circumference(p(1.0 1.0), c(p(0.0 0.0), 1.0)))
	assert***(are-in-circumference(p(1.0 0.0), c(p(0.0 0.0), 1.0)))
	assert***(are-in-circumference(p(0.2 0.2), c(p(0.0 0.0), 1.0)))	
		***Veamos las funciones asociadas al punto de corte recta, circunferencia.
		***Funcion cut?-r-c.
	assertTrue(cut?-r-c(r(p(-1.0 1.0) p(1.0 1.0)), c(p(0.0 0.0), 2.0)))
	assertTrue(cut?-r-c(r(p(-1.0 1.0) p(1.0 1.0)), c(p(0.0 0.0), 1.0)))
	assertFalse(cut?-r-c(r(p(2.0 2.0) p(-2.0 2.0)), c(p(0.0 0.0), 1.0)))
		***Funciones cut-point-r-c-1 cut-point-r-c-2.
	assertEqual(cut-point-r-c-1(r(p(0.0 0.0) p(1.0 1.0)), c(p(1.0 0.0), 1.0)), p(1.0 1.0))
	assertDifferent(cut-point-r-c-1(r(p(0.0 1.0) p(1.0 0.0)), c(p(0.0 0.0), 0.5)), p(0.5 0.5))
	assertEqual(cut-point-r-c-2(r(p(0.0 -2.0) p(1.0 0.0)), c(p(3.0 2.0), 1.0)), p(2.0 2.0))
	assertDifferent(cut-point-r-c-2(r(p(0.0 0.0) p(2.0 2.0)), c(p(2.0 0.0), 2.0)), p(2.0 2.0))
		***Funcion cut-point-r-c.
	assertEqual(cut-point-r-c(r(p(2.0 0.0) p(0.0 2.0)), c(p(0.0 0.0), 2.0)), p(0.0 2.0) p(2.0 0.0))
	assertDifferent(cut-point-r-c(r(p(4.0 0.0) p(4.0 -2.0)), c(p(0.0 0.0), 1.0)),*** ***)
	assertEqual(cut-point-r-c(r(p(0.0 2.0) p(2.0 2.0)), c(p(0.0 0.0), 2.0)), *** ***)
	assertEqual(cut-point-r-c(r(p(1.0 0.0) p(1.0 1.0)), c(p(0.0 1.0), 1.0)), *** ***)
		***Veamos las funciones asociadas al punto de corte de dos circunferencias.
		***Funcion cut?-c-c
	assert***(cut?-c-c(c(p(0.0 0.0), 2.0), c(p(2.0 2.0), 2.0)))
	assert***(cut?-c-c(c(p(0.0 0.0), 1.0), c(p(2.0 0.0), 1.0)))
	assert***(cut?-c-c(c(p(0.0 0.0), 1.0), c(p(0.0 2.0), 1.0)))
	assert***(cut?-c-c(c(p(1.0 2.0), 1.0), c(p(4.0 5.0), 1.0)))
		***Funciones cut-point-circumferences-1 y cut-point-circumferences-2
 	assertEqual(cut-point-circumferences-1(c(p(0.0 0.0), 2.0), c(p(2.0 2.0), 2.0)), p(0.0 2.0))
 	assertEqual(cut-point-circumferences-2(c(p(0.0 0.0), 2.0), c(p(2.0 2.0), 2.0)), p(2.0 0.0))
		***Funciones cut-point-circumferences-x-dis y cut-point-circumferences-y-dis
	assertDifferent(cut-point-circumferences-x-dis(c(p(2.0 0.0), 1.0), c(p(2.0 2.0), 1.0)), p(2.0 1.0) p(2.0 1.0))
	assertEqual(cut-point-circumferences-y-dis(c(p(2.0 0.0), 1.0), c(p(2.0 2.0), 1.0)), p(2.0 1.0) p(2.0 1.0))
	assertEqual(cut-point-circumferences-x-dis(c(p(0.0 2.0), 1.0), c(p(2.0 2.0), 1.0)), p(1.0 2.0) p(1.0 2.0))
	assertDifferent(cut-point-circumferences-y-dis(c(p(0.0 2.0), 1.0), c(p(2.0 2.0), 1.0)), p(1.0 2.0) p(1.0 2.0))
		***Funcion cut-point-c-c
	assertEqual(cut-point-c-c(c(p(0.0 0.0), 2.0), c(p(2.0 2.0), 2.0)), p(0.0 2.0) p(2.0 0.0))
	assertEqual(cut-point-c-c(c(p(2.0 0.0), 1.0), c(p(2.0 2.0), 1.0)), p(2.0 1.0) p(2.0 1.0))
	assertEqual(cut-point-c-c(c(p(0.0 2.0), 1.0), c(p(2.0 2.0), 1.0)), p(1.0 2.0) p(1.0 2.0))

endu)
