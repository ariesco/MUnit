load CIRCUMFERENCE.maude
fmod GEO2D is

	pr CIRCUMFERENCE .

	sort Figure .
	subsort Point < Figure .
	subsort Line < Figure .
	subsort Circumference < Figure .

	vars p1 p2 : Point .
	vars r1 r2 : Line .
	vars c1 c2 : Circumference .

	op cut-point : Figure Figure -> List [comm] .
	*** Comprueba si dos figuras se cortan, y devuelve una lista con los puntos de corte
	ceq cut-point(p1, p2) = p1
	if p1 == p2 .
	ceq cut-point(p1 , r1) = p1
	if are-in-line(p1 , r1) .
	ceq cut-point(r1 , r2) = cut-point-r-r(r1 , r2)
	if cut?-r-r(r1 , r2) .
	ceq cut-point(p1 , c1) = p1
	if are-in-circumference(p1 , c1) .
	ceq cut-point(r1 , c1) = cut-point-r-c(r1 , c1)
	if cut?-r-c(r1 , c1) .
	ceq cut-point(c1 , c2) = cut-point-c-c(c1 , c2)
	if cut?-c-c(c1 , c2) .
	ceq cut-point(p1, p2) = mt
	if not p1 == p2 .	
	ceq cut-point(p1 , r1) = mt
	if not are-in-line(p1 , r1) .
	ceq cut-point(r1 , r2) = mt 
	if not cut?-r-r(r1 , r2) .
	ceq cut-point(p1 , c1) = mt
	if not are-in-circumference(p1 , c1) .
	ceq cut-point(r1 , c1) = mt
	if not cut?-r-c(r1 , c1) .
	ceq cut-point(c1 , c2) = mt
	if not cut?-c-c(c1 , c2) .

endfm
