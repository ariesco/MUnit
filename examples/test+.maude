fmod FOO is
 pr NAT .

 vars N N' : Nat .

 op suma : Nat Nat -> Nat .
 eq suma(N, N') = N + N' .

 op par : Nat -> Bool .
 eq par(0) = true .
 eq par(1) = false .
 eq par(s(s(N))) = par(N) .
endfm

mod FOO+ is
 pr FOO .

 rl [to6] : 1 => 0 .
endm

load mUnit.maude

(munit FOO+ is
  assertEqual(3, 4)
  assertEqual(3, suma(1, 2))
  assertEqual(suma(2,1), 2 + 1)
  assertEqual(3, 3)

  assertTrue(par(7))
  hasSolution(1, 0, *, unbounded, true /\ (8 > 4))
  hasSolution(1, 0, *, 7, true /\ (8 > 4))
endu)

