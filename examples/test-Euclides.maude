load geoIO.maude
load ../mUnit.maude

*** Proposicion 1 del libro 1
(munit IOGEO2D is
  loop(init-geo)
  command(point 0.0 0.0 as p1)
  command(point 1.0 0.0 as p2)
  command(line r1 from p1 to p2)
  command(circumference c1 in p1 with radius distance from p1 to p2)
  command(circumference c2 in p2 with radius distance from p1 to p2)
  command(cut point p3 and p4 of c1 and c2)
  command(line r2 from p1 to p3)
  command(line r3 from p2 to p3)
  assertEqual(distance(@dic ['p1], @dic ['p2]), distance(@dic ['p2], @dic ['p3]))
***  assertTrue(equal-epsilon(distance(@dic ['p1], @dic ['p2]), distance(@dic ['p2], @dic ['p3]), 10.0 ^ (- 6.0)))
  assertEqual(distance(@dic ['p2], @dic ['p3]), distance(@dic ['p3], @dic ['p1]))
***  Da error en los decimales, una es 1.0 y la otra 0.99999999999
endu)

*** Proposicion 2 del libro 1
(munit IOGEO2D is
  loop(init-geo)
  command(point 0.0 0.0 as a)
  command(point 1.0 2.0 as b)
  command(point 2.0 -3.0 as t)
  command(line from b to t)
  ***Hasta aqui los elementos iniciales
  command(line ab from a to b)
  command(circumference c1 in a with radius distance from a to b)
  command(circumference c2 in b with radius distance from a to b)
  command(cut point A and p1 of c1 and c2)
  command(line Aa from A to a)
  command(line Ab from A to b)
  command(circumference bbr in b with radius distance from b to r) 
  command(cut point h and h1 of bbr and Ab)
  command(circumference AAh in A with radius distance from A to h)
  command(cut point p of AAh and Aa)
  assertEqual(distance(@dic['a], @dic['p]), distance(@dic['b], @dic['t]))   
***  assertTrue(equal-epsilon(distance(@dic['a], @dic['p]), distance(@dic['b], @dic['t]), (10 ^ (- 6)))  
endu)

*** Proposicion 3 del libro 1
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as a)
   command(point 3.0 2.0 as b)
   command(point 1.0 1.0 as p1)
   command(point 1.0 2.0 as p2)
   command(line ab from a to b)
   command(line r from p1 to p2)
   command(circumference c1 in a with radius distance from p1 to p2)
   command(cut point e and p3 from c1 and ab)
   assertEqual(distance(@dic['a], @dic['e]), distance(@dic['p1], @dic['p2]))
endu)

*** Proposicion 9 del libro 1
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as p1)
   command(point 0.0 3.0 as p2)
   command(point 3.0 0.0 as p3)
   command(line r1 from p1 to p2)
   command(line r2 from p1 to p3)
   command(point 0.0 2.0 as p4)
   command(circumference c1 in p1 with radius distance from p1 to p4)
   command(cut point p5 and p6 of r2 and c1)
   command(line r2 from p5 to p4)
   command(circumference c2 in p5 with radius distance p5 to p4)
   command(dircumference c3 in p4 with radius distance p5 to p4)
   command(cut point p7 and p8 of c2 and c3)
   command(line r3 from p1 to p7)
   assertEqual(angle(@dic['r1], @dic['r3]), angle(@dic['r3], @dic['r2]))
   assertEqual(angle(@dic['r1], @dic['r2]), (angle(@dic['r1], @dic['r3]) + angle(@dic['r3], @dic['r2])))
endu)

*** Proposicion 10 del libro 1
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as p1)
   command(point 2.0 0.0 as p2)
   command(line r1 from p1 to p2)
   command(circumference c1 in p1 with radius distance from p1 to p2)
   command(circumference c2 in p2 with radius distance from p1 to p2)
   command(cut point p3 and p4 from c1 and c2)
   command(line r2 from p1 to p3)
   command(line r3 from p2 to p3)
   command(circumference c3 in p3 with radius 0.5)
   command(cut point p5 and p5' from c3 and r2)
   command(cut point p6 and p6' from c3 and r3)	
   command(line r4 from p5 to p6)
   command(circumference c4 in p5 with radius distance from p5 to p6)
   command(circumference c5 in p6 with radius distance from p5 to p6)
   command(cut point p7 and p7' from c4 and c5)
   command(line r5 from p7 to p3)
   command(cut point p8 and p8' from r5 and r2)
   assertEqual(distance(@dic['p1], @dic['p8]), distance(@dic['p8], @dic['p2]))
endu)

*** Proposicion 11 del libro 1
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as p1)
   command(point 7.0 0.0 as p2)
   command(point 3.0 0.0 as p3)
   command(line r1 from p1 to p2)
   command(circumference c1 in p3 with radius distance from p1 to p3)
   command(cut point p4 and p5 of r1 and c1)
   command(circumference c2 in p1 with radius distance from p1 to p5)
   command(circumference c3 in p5 with radius distance from p1 to p5)
   command(cut point p6 and p7 of c2 and c3)
   command(line r2 from p3 to p7)
   assertTrue(are-perpendiculars(@dic['r1], @dic['r2]))
endu)

*** Proposicion 12 del libro 1
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as p1)
   command(point 1.0 0.0 as p2)
   command(line r1 from p1 to p2)
   command(point 0.0 2.0 as p3)
   ***Elementos iniciales.
   command(point 0.0 -2.0 as p4)
   command(circumference c1 in p3 with radius distance from p3 to p4)
   command(cut point p5 and p6 of r1 and c1)
   command(circumference c2 in p5 with radius distance from p5 to p6)
   command(circumference c3 in p6 with radius distance from p5 to p6)
   command(cut point p7 and p8 of c2 and c3)
   command(line r2 from p7 to p8)
   assertTrue(are-perpendiculars(@dic['r1], @dic['r2]))
endu)

*** Proposicion 1 del libro 3
(munit IOGEO2D is
   loop(init-geo)
   command(point 0.0 0.0 as p1)
   command(point 1.0 0.0 as p2)
   command(circumference c1 in p1 with radius distance from p1 and p2)
   command(point 0.0 1.0 as p3)
   ***assertTrue(are-in-circumference(@dic['p2], @dic['c1]))
   ***assertTrue(are-in-circumference(@dic['p3], @dic['c1]))
   ***Elementos iniciales.
   command(line r1 from p2 to p3)
   command(ccircumference c2 in p2 with radius distance from p2 to p3)
   command(ccircumference c3 in p3 with radius distance from p2 to p3)
   command(cut point p4 and p5 of c2 and c3)
   command(line r2 from p4 to p5)
   command(cut point p6 and p7 of c1 and r2)
   command(circumference c4 in p6 with radius distance from p6 to p7)
   command(circumference c5 in p7 with radius distance from p6 to p7)
   command(cut point p8 and p9 of c4 and c5)
   command(line r3 from p8 to p9)
   command(cut point p10 and p11 of r2 and r3)
   assertFalse(contains?(@dic, 'p10))
   assertFalse(contains?(@dic, 'p11))
endu) 
